import { db } from "../db";
import { cards, cardSets } from "@shared/schema";
import { sql } from "drizzle-orm";

export class CardMigrationService {
  
  async checkIfCardsTableExists(): Promise<boolean> {
    try {
      const result = await db.execute(sql`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'cards'
        );
      `);
      return result.rows[0]?.exists === true;
    } catch (error) {
      console.error("Error checking cards table:", error);
      return false;
    }
  }

  async createCardsTablesIfNeeded(): Promise<void> {
    const tablesExist = await this.checkIfCardsTableExists();
    
    if (!tablesExist) {
      console.log("Creating cards tables...");
      
      try {
        // Create card_sets table first
        await db.execute(sql`
          CREATE TABLE IF NOT EXISTS "card_sets" (
            "code" text PRIMARY KEY NOT NULL,
            "name" text NOT NULL,
            "released_at" text,
            "set_type" text,
            "card_count" integer DEFAULT 0
          );
        `);

        await db.execute(sql`CREATE INDEX IF NOT EXISTS "sets_name_idx" ON "card_sets" ("name");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "sets_released_idx" ON "card_sets" ("released_at");`);

        // Create cards table
        await db.execute(sql`
          CREATE TABLE IF NOT EXISTS "cards" (
            "id" text PRIMARY KEY NOT NULL,
            "name" text NOT NULL,
            "mana_cost" text,
            "cmc" integer DEFAULT 0 NOT NULL,
            "type_line" text NOT NULL,
            "oracle_text" text,
            "colors" text[] DEFAULT '{}' NOT NULL,
            "color_identity" text[] DEFAULT '{}' NOT NULL,
            "power" text,
            "toughness" text,
            "loyalty" text,
            "rarity" text NOT NULL,
            "set_code" text NOT NULL,
            "set_name" text NOT NULL,
            "collector_number" text NOT NULL,
            "released_at" text,
            "artist" text,
            "border_color" text DEFAULT 'black',
            "layout" text DEFAULT 'normal',
            "keywords" text[] DEFAULT '{}' NOT NULL,
            "produced_mana" text[] DEFAULT '{}' NOT NULL,
            "card_faces" jsonb,
            "image_uris" jsonb,
            "prices" jsonb,
            "legalities" jsonb,
            "edhrec_rank" integer,
            "penny_rank" integer,
            "last_updated" timestamp DEFAULT now() NOT NULL
          );
        `);

        // Create indexes
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_name_idx" ON "cards" ("name");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_cmc_idx" ON "cards" ("cmc");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_type_idx" ON "cards" ("type_line");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_colors_idx" ON "cards" ("colors");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_color_identity_idx" ON "cards" ("color_identity");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_rarity_idx" ON "cards" ("rarity");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_set_idx" ON "cards" ("set_code");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "cards_last_updated_idx" ON "cards" ("last_updated");`);

        // Create additional tables
        await db.execute(sql`
          CREATE TABLE IF NOT EXISTS "card_images" (
            "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            "card_id" text NOT NULL,
            "image_type" text NOT NULL,
            "image_url" text NOT NULL
          );
        `);

        await db.execute(sql`CREATE INDEX IF NOT EXISTS "card_images_card_idx" ON "card_images" ("card_id");`);

        await db.execute(sql`
          CREATE TABLE IF NOT EXISTS "card_prices" (
            "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            "card_id" text NOT NULL,
            "price_type" text NOT NULL,
            "price" text,
            "last_updated" timestamp DEFAULT now() NOT NULL
          );
        `);

        await db.execute(sql`CREATE INDEX IF NOT EXISTS "card_prices_card_idx" ON "card_prices" ("card_id");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "card_prices_type_idx" ON "card_prices" ("price_type");`);

        await db.execute(sql`
          CREATE TABLE IF NOT EXISTS "card_legalities" (
            "id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            "card_id" text NOT NULL,
            "format" text NOT NULL,
            "legality" text NOT NULL
          );
        `);

        await db.execute(sql`CREATE INDEX IF NOT EXISTS "card_legalities_card_idx" ON "card_legalities" ("card_id");`);
        await db.execute(sql`CREATE INDEX IF NOT EXISTS "card_legalities_format_idx" ON "card_legalities" ("format");`);

        console.log("Cards tables created successfully");
      } catch (error) {
        console.error("Error creating cards tables:", error);
        throw error;
      }
    } else {
      console.log("Cards tables already exist");
    }
  }

  async getCardCount(): Promise<number> {
    try {
      const result = await db.execute(sql`SELECT COUNT(*) as count FROM cards;`);
      return parseInt(result.rows[0]?.count as string) || 0;
    } catch (error) {
      console.log("Cards table not ready yet:", error);
      return 0;
    }
  }
}

export const cardMigrationService = new CardMigrationService();